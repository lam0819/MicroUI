name: Release

on:
  push:
    tags:
      - 'v*' # Triggers on version tags like v1.0.0, v1.2.3, etc.

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Build library
        run: npm run build
        
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Verify version match
        run: |
          TAG_VERSION="${{ steps.get_version.outputs.VERSION }}"
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "‚ùå Version mismatch: tag v$TAG_VERSION != package.json v$PACKAGE_VERSION"
            echo "Please ensure git tag matches package.json version"
            exit 1
          fi
          echo "‚úÖ Version match confirmed: v$TAG_VERSION"
        
      - name: Create release notes
        id: release_notes
        run: |
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## üöÄ MicroUI v${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### üì¶ Assets" >> $GITHUB_OUTPUT
          
          # Calculate file sizes properly
          JS_SIZE=$(stat -c%s dist/microui.js 2>/dev/null || stat -f%z dist/microui.js)
          MIN_SIZE=$(stat -c%s dist/microui.min.js 2>/dev/null || stat -f%z dist/microui.min.js)
          ESM_SIZE=$(stat -c%s dist/microui.esm.js 2>/dev/null || stat -f%z dist/microui.esm.js)
          GZIP_SIZE=$(gzip -c dist/microui.min.js | wc -c)
          
          echo "- **microui.js** ($(echo $JS_SIZE | numfmt --to=iec)B) - Development build with source maps" >> $GITHUB_OUTPUT
          echo "- **microui.min.js** ($(echo $MIN_SIZE | numfmt --to=iec)B) - Production build, minified" >> $GITHUB_OUTPUT
          echo "- **microui.esm.js** ($(echo $ESM_SIZE | numfmt --to=iec)B) - ES modules build" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### üìä Bundle Analysis" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          echo "Minified: $(echo $MIN_SIZE | numfmt --to=iec)B" >> $GITHUB_OUTPUT
          echo "Gzipped:  $(echo $GZIP_SIZE | numfmt --to=iec)B" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### üîó Links" >> $GITHUB_OUTPUT
          echo "- üìö [Documentation](https://lam0819.github.io/MicroUI/)" >> $GITHUB_OUTPUT
          echo "- üéÆ [Live Examples](https://lam0819.github.io/MicroUI/examples/)" >> $GITHUB_OUTPUT
          echo "- üìã [API Reference](https://lam0819.github.io/MicroUI/#api-reference)" >> $GITHUB_OUTPUT
          echo "- ü§ñ [LLMs.txt](https://lam0819.github.io/MicroUI/llms.txt)" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### üì• Installation" >> $GITHUB_OUTPUT
          echo "\`\`\`bash" >> $GITHUB_OUTPUT
          echo "# NPM" >> $GITHUB_OUTPUT
          echo "npm install microui@${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "# CDN" >> $GITHUB_OUTPUT
          echo "<script src=\"https://unpkg.com/@extralam/microui@${{ steps.get_version.outputs.VERSION }}/dist/microui.min.js\"></script>" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create ZIP archive
        run: |
          mkdir -p release-assets
          cp dist/microui.js release-assets/
          cp dist/microui.min.js release-assets/
          cp dist/microui.esm.js release-assets/
          cp README.md release-assets/
          cp LICENSE release-assets/
          cp package.json release-assets/
          cd release-assets
          zip -r ../microui-v${{ steps.get_version.outputs.VERSION }}.zip .
          cd ..
          
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: MicroUI v${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false
          files: |
            dist/microui.js
            dist/microui.min.js
            dist/microui.esm.js
            microui-v${{ steps.get_version.outputs.VERSION }}.zip
          fail_on_unmatched_files: false
          generate_release_notes: true
          
      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
